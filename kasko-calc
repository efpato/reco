#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import os
import optparse
import signal
import time

import xlrd
import xlsxwriter
from selenium.webdriver import Chrome, ChromeOptions

from pages import KaskoCalcPage
from recaptcha import resolve
from sms import wait_for_sms
from utils import get_api_key, get_site_key


PAGE_LOAD_TIMEOUT = 60

logging.basicConfig(format=("%(asctime)s  %(levelname)-8s "
                            "%(module)-15s %(message)s"),
                    level=logging.DEBUG)
logging.getLogger(
    "selenium.webdriver.remote.remote_connection").setLevel(logging.WARNING)


def load(filename):
    logging.debug('Loading data from "%s"', filename)
    workbook = xlrd.open_workbook(filename)
    sheet = workbook.sheet_by_index(0)

    data = []
    if sheet.nrows > 1:
        for row in range(sheet.nrows)[1:]:
            data.append({
                "another_sk": sheet.cell_value(row, 0) == 'Да',
                "previous_sk": sheet.cell_value(row, 1),
                "pay_period": sheet.cell_value(row, 2),
                "face": sheet.cell_value(row, 3),
                "is_bank": sheet.cell_value(row, 4) == 'Да',
                "brand": sheet.cell_value(row, 5),
                "model": (int(sheet.cell_value(row, 6))
                          if str(sheet.cell_value(row, 6)).replace(
                              '.0', '').isdigit()
                          else sheet.cell_value(row, 6)),
                "dtp_count": int(sheet.cell_value(row, 7)),
                "auto_race": sheet.cell_value(row, 8) == 'Да',
                "price": int(float(sheet.cell_value(row, 9))),
                "year": int(float(sheet.cell_value(row, 10))),
                "purchase_date": sheet.cell_value(row, 11),
                "region": sheet.cell_value(row, 12),
                "owner_address": sheet.cell_value(row, 13),
                "driver_list": sheet.cell_value(row, 14),
                "driver_age": [int(float(age))
                               for age in str(
                                   sheet.cell_value(row, 15)).split(';')
                               if age],
                "driver_stage": [int(float(stage))
                                 for stage in str(
                                     sheet.cell_value(row, 16)).split(';')
                                 if stage],
                "driver_sex": str(sheet.cell_value(row, 17)).split(';'),
                "steal_device": sheet.cell_value(row, 18),
                "is_thf_mech_device": sheet.cell_value(row, 19) == 'Да',
                "payment": sheet.cell_value(row, 20)
            })

    logging.debug('Data has been loaded (%d rows)', len(data))

    return data


def report(filename, results):
    logging.debug('Creating report ...')
    workbook_in = xlrd.open_workbook(filename)
    sheet_in = workbook_in.sheet_by_index(0)

    out = "%s.out.xlsx" % os.path.basename(filename).split('.')[0]
    workbook_out = xlsxwriter.Workbook(out)
    sheet_out = workbook_out.add_worksheet()

    for row in range(sheet_in.nrows):
        for col in range(sheet_in.ncols):
            sheet_out.write(row, col, sheet_in.cell_value(row, col))

        col = sheet_in.ncols
        if 0 < row <= len(results):
            if not isinstance(results[row - 1], list):
                sheet_out.write(row, col, results[row - 1])
            else:
                for result in results[row - 1]:
                    total, description = result
                    sheet_out.write(row, col, total)
                    col += 1
                    sheet_out.write(row, col, description)
                    col += 1

    workbook_out.close()
    logging.debug('Report has been created: "%s"', out)


def calculate(params):
    logging.debug('Starting calculation: params => %s', params)

    driver = None
    result = None

    for attempt in range(1):
        if stopped:
            break

        logging.debug('Attempt #%d...', attempt + 1)

        try:
            options = ChromeOptions()
#             options.add_argument('headless')
#             options.add_argument('window-size=1280x800')

            driver = Chrome(chrome_options=options)
            driver = Chrome()
            driver.maximize_window()
            logging.debug('Chrome started')

            driver.set_page_load_timeout(PAGE_LOAD_TIMEOUT)
            logging.debug('Set page_load_timeout=%d', PAGE_LOAD_TIMEOUT)

            url = 'https://www.reso.ru/Retail/Motor/Calculator/'
            logging.debug('Opening "%s"', url)
            driver.get(url)

            page = KaskoCalcPage(driver)

            page.pay_period = params['pay_period']

            page.car_brand = params['brand']
            page.car_model = params['model']
            page.car_year = params['year']
            page.price = params['price']
#             page.purchase_date = params['purchase_date']
            if params['steal_device'].lower() != 'отсутствует':
                page.steal_device = params['steal_device']
            page.is_thf_mech_device = params['is_thf_mech_device']
            page.auto_race = params['auto_race']
            page.is_bank = params['is_bank']
            page.dtp_count = params['dtp_count']

            page.region = params['region']
            page.owner_address = params['owner_address']

            page.face = params['face']
            if params['driver_list'] == 'Без ограничения':
                page.drivers_unlimit.click()
            elif params['driver_list'] == 'Ограниченный список':
                for i in range(len(params['driver_age'])):
                    if i > 0:
                        page.add_driver.click()
                    page.driver_age(i + 1, params['driver_age'][i])
                    page.driver_stage(i + 1, params['driver_stage'][i])
                    page.driver_sex(i + 1, params['driver_sex'][i])
            elif params['driver_list'] == 'Без ограничения 22+, 2+':
                page.drivers_unlimit_22.click()

            if params['payment'] == ('Ремонт на СТОА официальных дилеров по '
                                     'направлению страховой компании'):
                page.payment_1.click()
            elif params['payment'] == ('Ремонт на СТОА, не являющихся '
                                       'официальными дилерами, по направлению '
                                       'страховой компании'):
                page.payment_2.click()

            if params['another_sk']:
                page.another_sk = True
                page.previous_sk = params['previous_sk']

            page.calculation.click()

            api_key = get_api_key()
            site_key = get_site_key()
            captcha = resolve(url, api_key, site_key)
            phone = '+79233619670'
            timestamp = time.time()
            page.resolve_recaptcha(phone, captcha)
            code = wait_for_sms(
                phone, from_='www.reso.ru', timestamp=timestamp)
            page.code = code
            page.confirm.click()

            result = page.result
            break
        except Exception as e:
            logging.exception(e)
            if attempt == 2:
                result = "%s" % e
                break
        finally:
            if driver is not None:
                driver.quit()

    logging.debug('Calculation has been finished. Result => %s', result)

    return result


stopped = False


def main():
    def sigint_handler(signum, frame):
        global stopped

        logging.info("Got signal: signum=%d, frame=%s", signum, frame)
        stopped = True

    signal.signal(signal.SIGINT, sigint_handler)

    parser = optparse.OptionParser(usage="%prog <file>")
    _, args = parser.parse_args()

    if not args:
        parser.error("Invalid arguments")

    filename = args[0]

    if not os.path.exists(filename):
        parser.error("File '%s' not exists" % filename)

    results = []
    for data in load(filename):
        if stopped:
            break
        results.append(calculate(data))

    report(filename, results)


if __name__ == '__main__':
    main()
